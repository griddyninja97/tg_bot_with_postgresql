from aiogram import Router, F
from aiogram.types import Message, InputFile, CallbackQuery
from aiogram.filters import Command
from db.crud import (
    sync_yml, get_groups_with_photo_counts, get_photos_by_group,
    add_photo, delete_photo, update_photo,sync_yml_from_path
)
from db.session import async_session
from bot.keyboard import main_keyboard, yml_management_keyboard, groups_keyboard, group_photos_keyboard, confirmation_keyboard
import os
import aiohttp
from db.crud import YML_BACKUP_DIR

router = Router()

@router.message(F.text.startswith("http"))
async def receive_yml_url(message: Message):
    url = message.text.strip()

    await message.answer("‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")

    try:
        import aiohttp
        import os
        file_path = "data/temp_download.yml"
        os.makedirs("data", exist_ok=True)

        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞, —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return
                content = await resp.read()

        import xml.etree.ElementTree as ET
        try:
            ET.fromstring(content)
        except ET.ParseError:
            await message.answer("‚ùå –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º XML/YML")
            return

        with open(file_path, "wb") as f:
            f.write(content)

        async with async_session() as db_session:
            await sync_yml_from_path(db_session, file_path)

        await message.answer("‚úÖ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ!")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    
@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

@router.message(F.text == "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å YML")
async def ask_upload_yml(message: Message):
    await message.answer("–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–∞–π–ª YML –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã.")

@router.message(F.content_type == "document")
async def receive_yml_file(message: Message):
    document = message.document
    if not (document.file_name.endswith(".yml") or document.file_name.endswith(".yaml")):
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ YML —Ñ–∞–π–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    file_path = f"data/{document.file_name}"
    await message.document.download(destination_file=file_path)

    async with async_session() as session:
        try:
            await sync_yml(session, file_path)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return

    await message.answer("‚úÖ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ YML!", reply_markup=main_keyboard())

@router.message(F.text == "üìÅ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")
async def list_groups(message: Message):
    async with async_session() as session:
        groups = await get_groups_with_photo_counts(session)
    if not groups:
        await message.answer("–ü–æ–∫–∞ –≥—Ä—É–ø–ø –Ω–µ—Ç.")
        return
    kb = groups_keyboard(groups, page=0)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=kb)


@router.callback_query(F.data.startswith("group:"))
async def show_group_photos(callback: CallbackQuery):
    group_id = int(callback.data.split(":")[1])
    async with async_session() as session:
        photos = await get_photos_by_group(session, group_id)

    if not photos:
        await callback.message.answer("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    await callback.message.answer(f"–§–æ—Ç–æ –≥—Ä—É–ø–ø—ã:", reply_markup=group_photos_keyboard(group_id, photos))
    
@router.callback_query(F.data.startswith("groups_page:"))
async def groups_page_callback(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    async with async_session() as session:
        groups = await get_groups_with_photo_counts(session)
    kb = groups_keyboard(groups, page)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith("add_photo:"))
async def add_photo_prompt(callback: CallbackQuery):
    group_id = int(callback.data.split(":")[1])
    await callback.message.answer(f"–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –≥—Ä—É–ø–ø—ã —Å id {group_id}. (–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª)")
    # –ó–¥–µ—Å—å –Ω–∞–¥–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ FSM –¥–ª—è –ø—Ä–∏—ë–º–∞ —Ñ–∞–π–ª–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è

@router.callback_query(F.data.startswith("delete_photo:"))
async def delete_photo_confirm(callback: CallbackQuery):
    photo_id = int(callback.data.split(":")[1])
    await callback.message.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ?", reply_markup=confirmation_keyboard(f"delete_photo:{photo_id}"))

@router.callback_query(F.data.startswith("confirm:"))
async def process_confirm(callback: CallbackQuery):
    action = callback.data.split(":", 1)[1]

    async with async_session() as session:
        if action.startswith("delete_photo:"):
            photo_id = int(action.split(":")[1])
            await delete_photo(session, photo_id)
            await callback.message.answer("–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ.")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

    await callback.message.delete_reply_markup()

@router.callback_query(F.data == "groups_list")
async def back_to_groups(callback: CallbackQuery):
    async with async_session() as session:
        groups = await get_groups_with_photo_counts(session)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=groups_keyboard(groups))

@router.message(F.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ YML")
async def yml_management(message: Message):
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ YML —Ñ–∞–π–ª–∞–º–∏:", reply_markup=yml_management_keyboard())

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())

@router.message(F.text == "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å YML")
async def manual_sync(message: Message):
    async with async_session() as session:
        try:
            await sync_yml(session)
            await message.answer("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è YML –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=main_keyboard())
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

@router.message(F.text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ø–∏—é YML")
async def save_backup(message: Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ø–∏–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.", reply_markup=yml_management_keyboard())

@router.message(F.text == "‚è™ –û—Ç–∫–∞—Ç–∏—Ç—å YML")
async def restore_backup(message: Message):
    try:
        backups = sorted(os.listdir(YML_BACKUP_DIR), reverse=True)
    except FileNotFoundError:
        await message.answer("–ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=yml_management_keyboard())
        return

    if not backups:
        await message.answer("–ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=yml_management_keyboard())
        return

    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()
    for fname in backups:
        kb.button(text=fname, callback_data=f"restore_yml:{fname}")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—ç–∫–∞–ø –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("restore_yml:"))
async def restore_yml_callback(callback: CallbackQuery):
    backup_filename = callback.data.split(":", 1)[1]
    try:
        await restore_yml(backup_filename)
        await callback.message.answer(f"‚úÖ YML —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ {backup_filename}", reply_markup=yml_management_keyboard())
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}", reply_markup=yml_management_keyboard())
    await callback.answer()
